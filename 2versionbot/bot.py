import telebot
from telebot import types
import math
from database import Teacher, Subject, Lesson, Card, get_session
import os
from dotenv import load_dotenv
from sqlalchemy import func
from db_utils import (
    create_teacher,
    get_teacher_by_username,
    add_subject,
    get_all_subjects,
    get_subject_by_name,
    add_lesson,
    get_teacher_lessons,
    get_subject_lessons,
    edit_lesson,
    delete_lesson,
    add_card,
    get_lesson_cards,
    edit_card,
    delete_card,
    grant_subject_access,
    revoke_subject_access,
    get_teacher_subjects,
    get_subject_teachers,
    has_subject_access,
    get_all_teachers,
    get_teacher_by_id
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('tg.env')
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authenticated_users = {}  # {user_id: teacher_id}
user_states = {}  # {user_id: state}
user_data = {}  # {user_id: {key: value}}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_USERNAME = "waiting_username"
WAITING_PASSWORD = "waiting_password"
WAITING_LESSON_TITLE = "waiting_lesson_title"
WAITING_LESSON_CONTENT = "waiting_lesson_content"
WAITING_CARD_QUESTION = "waiting_card_question"
WAITING_CARD_ANSWER = "waiting_card_answer"
WAITING_TEST_TITLE = "waiting_test_title"
WAITING_TEST_QUESTION = "waiting_test_question"
WAITING_TEST_ANSWER = "waiting_test_answer"
WAITING_CARD_LESSON = "waiting_card_lesson"
WAITING_TEST_LESSON = "waiting_test_lesson"
WAITING_TEST_MORE = "waiting_test_more"
WAITING_LESSON_SUBJECT = "waiting_lesson_subject"
WAITING_SUBJECT_NAME = "waiting_subject_name"
WAITING_TEACHER_USERNAME = "waiting_teacher_username"
WAITING_TEACHER_PASSWORD = "waiting_teacher_password"
WAITING_ADMIN_USERNAME = "waiting_admin_username"
WAITING_ADMIN_PASSWORD = "waiting_admin_password"
WAITING_EDIT_LESSON_TITLE = "waiting_edit_lesson_title"
WAITING_EDIT_LESSON_CONTENT = "waiting_edit_lesson_content"
WAITING_ACCESS_TEACHER = "waiting_access_teacher"
WAITING_ACCESS_SUBJECT = "waiting_access_subject"
WAITING_REVOKE_TEACHER = "waiting_revoke_teacher"
WAITING_REVOKE_SUBJECT = "waiting_revoke_subject"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_SETTINGS = {
    'total_subjects': 30,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    'subjects_per_page': 4,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    'lessons_per_page': 4,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    'total_lessons': 10  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
}

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_ACCESS_SUBJECT)
def handle_grant_access_subject(message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        if not message.text.startswith("üìö"):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        subject_name = message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        subject = get_subject_by_name(subject_name)
        if not subject:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        teacher_id = user_data.get(message.from_user.id, {}).get("selected_teacher_id")
        if not teacher_id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.")
            user_states[message.from_user.id] = "admin"
            access_management(message)
            return
        teacher = get_teacher_by_id(teacher_id)
        if not teacher:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[message.from_user.id] = "admin"
            access_management(message)
            return
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
        success = grant_subject_access(teacher_id, subject.id)
        if success:
            bot.send_message(message.chat.id, f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {teacher.username}!")
            for user_id, auth_teacher_id in authenticated_users.items():
                if auth_teacher_id == teacher_id:
                    bot.send_message(user_id, f"üéâ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
                    break
        else:
            bot.send_message(message.chat.id, f"‚ùå –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher.username} —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if message.from_user.id in user_data:
            del user_data[message.from_user.id]
        user_states[message.from_user.id] = "admin"
        access_management(message)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_REVOKE_SUBJECT)
def handle_revoke_access_subject(message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        if not message.text.startswith("üìö"):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        subject_name = message.text[2:].strip()
        subject = get_subject_by_name(subject_name)
        if not subject:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        teacher_id = user_data.get(message.from_user.id, {}).get("selected_teacher_id")
        if not teacher_id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.")
            user_states[message.from_user.id] = "admin"
            access_management(message)
            return
        teacher = get_teacher_by_id(teacher_id)
        if not teacher:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[message.from_user.id] = "admin"
            access_management(message)
            return
        # –û—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        success = revoke_subject_access(teacher_id, subject.id)
        if success:
            bot.send_message(message.chat.id, f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}' –æ—Ç–æ–∑–≤–∞–Ω —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher.username}!")
            for user_id, auth_teacher_id in authenticated_users.items():
                if auth_teacher_id == teacher_id:
                    bot.send_message(user_id, f"‚ö†Ô∏è –£ –≤–∞—Å –æ—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'.")
                    break
        else:
            bot.send_message(message.chat.id, f"‚ùå –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher.username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if message.from_user.id in user_data:
            del user_data[message.from_user.id]
        user_states[message.from_user.id] = "admin"
        access_management(message)

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üë®‚Äçüè´ –í–æ–π—Ç–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"), types.KeyboardButton("üë®‚Äçüéì –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏:", reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_states[message.from_user.id] = "admin"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"), types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"))
    markup.add(types.KeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"), types.KeyboardButton("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"))
    markup.add(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüè´ –í–æ–π—Ç–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
def teacher_login(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    user_states[message.from_user.id] = WAITING_USERNAME
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_USERNAME)
def handle_username(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data[message.from_user.id] = {"username": message.text}
    user_states[message.from_user.id] = WAITING_PASSWORD
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_PASSWORD)
def handle_password(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    username = user_data[message.from_user.id]["username"]
    password = message.text
    
    # –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    teacher = get_teacher_by_username(username)
    
    if teacher and teacher.check_password(password):
        authenticated_users[message.from_user.id] = teacher.id  # ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_states[message.from_user.id] = "teacher"
        show_subjects(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        user_states[message.from_user.id] = WAITING_USERNAME
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüéì –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫")
def student_login(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞"""
    user_states[message.from_user.id] = "student"
    show_subjects(message)

def show_teacher_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã"))
    markup.add(types.KeyboardButton("–í—ã–π—Ç–∏"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def show_subjects(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    session = get_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
        if message.from_user.id in authenticated_users:
            # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            teacher_id = authenticated_users[message.from_user.id]
            subjects = get_teacher_subjects(teacher_id)
        else:
            # –£—á–µ–Ω–∏–∫ –≤–∏–¥–∏—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            subjects = session.query(Subject).all()
        
        if not subjects:
            if message.from_user.id in authenticated_users:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            else:
                bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = []
        for subject in subjects:
            buttons.append(types.KeyboardButton(f"üìö {subject.name}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(buttons), 2):
            if i + 1 < len(buttons):
                markup.add(buttons[i], buttons[i + 1])
            else:
                markup.add(buttons[i])
        
        markup.add(types.KeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text.startswith("üìö") and message.text != "üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
def handle_subject(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞/–æ—Ç–∑—ã–≤–∞
    if (user_states.get(message.from_user.id) == "admin" or 
        user_states.get(message.from_user.id) == WAITING_ACCESS_SUBJECT or
        user_states.get(message.from_user.id) == WAITING_REVOKE_SUBJECT):
        return
    
    if message.from_user.id not in user_states:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    subject_name = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["selected_subject"] = subject_name
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    session = get_session()
    try:
        subject = get_subject_by_name(subject_name)
        if not subject:
            bot.send_message(message.chat.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        lessons = session.query(Lesson).filter(Lesson.subject_id == subject.id).all()
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        if not lessons:
            # –ï—Å–ª–∏ —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
            bot.send_message(message.chat.id, f"–í –ø—Ä–µ–¥–º–µ—Ç–µ '{subject.name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
            markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
        else:
            # –ï—Å–ª–∏ —É—Ä–æ–∫–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
            buttons = []
            for lesson in lessons:
                buttons.append(types.KeyboardButton(f"üìñ {lesson.title}"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
            for i in range(0, len(buttons), 2):
                if i + 1 < len(buttons):
                    markup.add(buttons[i], buttons[i + 1])
                else:
                    markup.add(buttons[i])
            
            markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text.startswith("üìñ"))
def handle_lesson(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞"""
    if message.from_user.id not in user_states:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    lesson_title = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–∫
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["selected_lesson"] = lesson_title
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
    if message.from_user.id in authenticated_users:
        teacher_id = authenticated_users[message.from_user.id]
        session = get_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            selected_subject = user_data[message.from_user.id].get("selected_subject")
            if not selected_subject:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç
            subject = get_subject_by_name(selected_subject)
            if not subject:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ò—â–µ–º —É—Ä–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ø—Ä–µ–¥–º–µ—Ç—É –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
            lesson = session.query(Lesson).filter(
                Lesson.title == lesson_title, 
                Lesson.subject_id == subject.id,
                Lesson.teacher_id == teacher_id
            ).first()
            
            if lesson:
                # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–∫
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                markup.add(types.KeyboardButton("üìù –ö–∞—Ä—Ç–æ—á–∫–∏"), types.KeyboardButton("üìã –¢–µ—Å—Ç—ã"))
                markup.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫"))
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–∫: {lesson_title}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            else:
                # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                markup.add(types.KeyboardButton("üìù –ö–∞—Ä—Ç–æ—á–∫–∏"), types.KeyboardButton("üìã –¢–µ—Å—Ç—ã"))
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–∫: {lesson_title}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        finally:
            session.close()
    else:
        # –£—á–µ–Ω–∏–∫
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton("üìù –ö–∞—Ä—Ç–æ—á–∫–∏"), types.KeyboardButton("üìã –¢–µ—Å—Ç—ã"))
        markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–∫: {lesson_title}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
def add_subject_start(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.")
        return

    user_states[message.from_user.id] = WAITING_SUBJECT_NAME
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_SUBJECT_NAME)
def handle_subject_name(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
    if message.from_user.id != ADMIN_ID:
        return
    
    subject_name = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
    existing_subject = get_subject_by_name(subject_name)
    if existing_subject:
        bot.send_message(message.chat.id, f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        user_states[message.from_user.id] = "admin"
        admin_panel(message)
        return

    subject = add_subject(name=subject_name)
    bot.send_message(message.chat.id, f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    user_states[message.from_user.id] = "admin"
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫")
def add_lesson_start(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    user_id = message.from_user.id
    if user_id in user_data and "selected_subject" in user_data[user_id]:
        # –ï—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
        subject_name = user_data[user_id]["selected_subject"]
        user_data[user_id]["subject_name"] = subject_name
        user_states[user_id] = WAITING_LESSON_TITLE
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}':")
    else:
        # –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        teacher_id = authenticated_users[user_id]
        subjects = get_teacher_subjects(teacher_id)
        
        if not subjects:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = []
        for subject in subjects:
            buttons.append(types.KeyboardButton(f"üìö {subject.name}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(buttons), 2):
            if i + 1 < len(buttons):
                markup.add(buttons[i], buttons[i + 1])
            else:
                markup.add(buttons[i])
        
        markup.add(types.KeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        
        user_states[message.from_user.id] = WAITING_LESSON_SUBJECT
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É—Ä–æ–∫–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_LESSON_SUBJECT)
def handle_lesson_subject(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É—Ä–æ–∫–∞"""
    if not message.text.startswith("üìö"):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    subject_name = message.text[2:]
    user_data[message.from_user.id]["subject_name"] = subject_name
    user_states[message.from_user.id] = WAITING_LESSON_TITLE
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_LESSON_TITLE)
def handle_lesson_title(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    teacher_id = authenticated_users[message.from_user.id]
    title = message.text
    subject_name = user_data[message.from_user.id]["subject_name"]

    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    subject = get_subject_by_name(subject_name)
    if not subject:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_states[message.from_user.id] = "teacher"
        show_teacher_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
    if not has_subject_access(teacher_id, subject.id):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.")
        user_states[message.from_user.id] = "teacher"
        show_teacher_menu(message)
        return

    lesson = add_lesson(title=title, content="", teacher_id=teacher_id, subject_id=subject.id)
    bot.send_message(message.chat.id, f"–£—Ä–æ–∫ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'!")
    user_states[message.from_user.id] = "teacher"
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if "subject_name" in user_data[message.from_user.id]:
        user_data[message.from_user.id]["selected_subject"] = user_data[message.from_user.id]["subject_name"]
        del user_data[message.from_user.id]["subject_name"]
    if "selected_lesson" in user_data[message.from_user.id]:
        del user_data[message.from_user.id]["selected_lesson"]
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    from types import SimpleNamespace
    fake_message = SimpleNamespace()
    fake_message.chat = message.chat
    fake_message.from_user = message.from_user
    fake_message.text = f"üìö {subject.name}"
    handle_subject(fake_message)

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
def add_card_start(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    user_id = message.from_user.id
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —É—Ä–æ–∫, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–∞
    if user_id in user_data and "selected_lesson" in user_data[user_id]:
        lesson_title = user_data[user_id]["selected_lesson"]
        user_data[user_id]["lesson_title"] = lesson_title
        user_states[user_id] = WAITING_CARD_QUESTION
        bot.send_message(
            message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É—Ä–æ–∫—É '{lesson_title}':\n\n"
            "- –î–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: –í–æ–ø—Ä–æ—Å%–û—Ç–≤–µ—Ç\n"
            "- –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö: –í–æ–ø—Ä–æ—Å1%–û—Ç–≤–µ—Ç1;–í–æ–ø—Ä–æ—Å2%–û—Ç–≤–µ—Ç2\n"
            "(–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è %, –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî ;)")
        return

    teacher_id = authenticated_users[user_id]
    lessons = get_teacher_lessons(teacher_id)
    
    if not lessons:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —É—Ä–æ–∫.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = []
    for lesson in lessons:
        buttons.append(types.KeyboardButton(f"üìñ {lesson.title}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])
    
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    user_states[user_id] = WAITING_CARD_LESSON
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_CARD_LESSON)
def handle_card_lesson(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not message.text.startswith("üìñ"):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    lesson_title = message.text[2:]
    user_data[message.from_user.id]["lesson_title"] = lesson_title
    user_states[message.from_user.id] = WAITING_CARD_QUESTION
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_CARD_QUESTION)
def handle_card_question(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
    user_id = message.from_user.id
    teacher_id = authenticated_users[user_id]
    lesson_title = user_data[user_id]["lesson_title"]

    text = message.text.strip()
    if ";" in text or "%" in text:
        # –§–æ—Ä–º–∞—Ç: –í–æ–ø—Ä–æ—Å%–û—Ç–≤–µ—Ç;–í–æ–ø—Ä–æ—Å2%–û—Ç–≤–µ—Ç2
        pairs = [p.strip() for p in text.split(";") if p.strip()]
        added = 0
        lessons = get_teacher_lessons(teacher_id)
        lesson = next((l for l in lessons if l.title == lesson_title), None)
        if lesson:
            for pair in pairs:
                if "%" in pair:
                    q, a = pair.split("%", 1)
                    q, a = q.strip(), a.strip()
                    if q:
                        add_card(question=q, answer=a, lesson_id=lesson.id)
                        added += 1
                else:
                    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å, –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
                    q = pair.strip()
                    if q:
                        add_card(question=q, answer="", lesson_id=lesson.id)
                        added += 1
            if added:
                bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {added} –∫ —É—Ä–æ–∫—É '{lesson.title}'!")
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            from types import SimpleNamespace
            fake_message = SimpleNamespace()
            fake_message.chat = message.chat
            fake_message.from_user = message.from_user
            fake_message.text = f"üìñ {lesson.title}"
            show_lesson_cards(fake_message)
            return
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[user_id] = "teacher"
            show_teacher_menu(message)
            return
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞, –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç–∞
        user_data[user_id]["question"] = text
        user_states[user_id] = WAITING_CARD_ANSWER
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_CARD_ANSWER)
def handle_card_answer(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    user_id = message.from_user.id
    teacher_id = authenticated_users[user_id]
    lesson_title = user_data[user_id]["lesson_title"]
    question = user_data[user_id]["question"]
    answer = message.text.strip()

    lessons = get_teacher_lessons(teacher_id)
    lesson = next((l for l in lessons if l.title == lesson_title), None)
    if lesson:
        add_card(question=question, answer=answer, lesson_id=lesson.id)
        bot.send_message(message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —É—Ä–æ–∫—É '{lesson.title}'!")
        from types import SimpleNamespace
        fake_message = SimpleNamespace()
        fake_message.chat = message.chat
        fake_message.from_user = message.from_user
        fake_message.text = f"üìñ {lesson.title}"
        show_lesson_cards(fake_message)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_states[user_id] = "teacher"
        show_teacher_menu(message)

@bot.message_handler(func=lambda message: message.text == "–í—ã–π—Ç–∏")
def logout(message):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if message.from_user.id in authenticated_users:
        del authenticated_users[message.from_user.id]
    if message.from_user.id in user_states:
        del user_states[message.from_user.id]
    if message.from_user.id in user_data:
        del user_data[message.from_user.id]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üë®‚Äçüè´ –í–æ–π—Ç–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"), types.KeyboardButton("üë®‚Äçüéì –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫"))
    bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º")
def return_to_subjects(message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    if user_id in user_data and "selected_subject" in user_data[user_id]:
        del user_data[user_id]["selected_subject"]
    
    show_subjects(message)

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º")
def return_to_lessons(message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
    if user_id in user_data and "selected_lesson" in user_data[user_id]:
        del user_data[user_id]["selected_lesson"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    if user_id in user_data and "selected_subject" in user_data[user_id]:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Ä–æ–∫–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_name = user_data[user_id]["selected_subject"]
        session = get_session()
        try:
            subject = session.query(Subject).filter(Subject.name == subject_name).first()
            if not subject:
                bot.send_message(message.chat.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            lessons = session.query(Lesson).filter(Lesson.subject_id == subject.id).all()
            
            if not lessons:
                bot.send_message(message.chat.id, f"–í –ø—Ä–µ–¥–º–µ—Ç–µ '{subject.name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
                return

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            buttons = []
            for lesson in lessons:
                buttons.append(types.KeyboardButton(f"üìñ {lesson.title}"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
            for i in range(0, len(buttons), 2):
                if i + 1 < len(buttons):
                    markup.add(buttons[i], buttons[i + 1])
                else:
                    markup.add(buttons[i])
            
            markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
        finally:
            session.close()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        show_subjects(message)

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" and message.from_user.id == ADMIN_ID)
def admin_return_to_main(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if user_id in user_states:
        del user_states[user_id]
    if user_id in user_data:
        del user_data[user_id]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üë®‚Äçüè´ –í–æ–π—Ç–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"), types.KeyboardButton("üë®‚Äçüéì –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫"))
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìù –ö–∞—Ä—Ç–æ—á–∫–∏")
def show_lesson_cards(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–∫–∞"""
    if message.from_user.id not in user_states:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    user_id = message.from_user.id
    if user_id not in user_data or "selected_lesson" not in user_data[user_id]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.")
        return

    lesson_title = user_data[user_id]["selected_lesson"]
    session = get_session()
    try:
        lesson = session.query(Lesson).filter(Lesson.title == lesson_title).first()
        if not lesson:
            bot.send_message(message.chat.id, "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        cards = session.query(Card).filter(Card.lesson_id == lesson.id).all()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if message.from_user.id in authenticated_users:
            # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
            if not cards:
                markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"))
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"–í —É—Ä–æ–∫–µ '{lesson.title}' –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.", reply_markup=markup)
            else:
                response = f"üìù –ö–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–∫–∞ '{lesson.title}':\n\n"
                for i, card in enumerate(cards, 1):
                    if card.answer:
                        response += f"{i}. –í–æ–ø—Ä–æ—Å: {card.question}\n   –û—Ç–≤–µ—Ç: {card.answer}\n\n"
                    else:
                        response += f"{i}. {card.question}\n\n"
                markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"))
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            # –£—á–µ–Ω–∏–∫
            if not cards:
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"–í —É—Ä–æ–∫–µ '{lesson.title}' –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.", reply_markup=markup)
            else:
                response = f"üìù –ö–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–∫–∞ '{lesson.title}':\n\n"
                for i, card in enumerate(cards, 1):
                    if card.answer:
                        response += f"{i}. –í–æ–ø—Ä–æ—Å: {card.question}\n   –û—Ç–≤–µ—Ç: {card.answer}\n\n"
                    else:
                        response += f"{i}. {card.question}\n\n"
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, response, reply_markup=markup)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text == "üìã –¢–µ—Å—Ç—ã")
def show_lesson_tests(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç—ã —É—Ä–æ–∫–∞"""
    if message.from_user.id not in user_states:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    user_id = message.from_user.id
    if user_id not in user_data or "selected_lesson" not in user_data[user_id]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.")
        return

    lesson_title = user_data[user_id]["selected_lesson"]
    session = get_session()
    try:
        lesson = session.query(Lesson).filter(Lesson.title == lesson_title).first()
        if not lesson:
            bot.send_message(message.chat.id, "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        tests = session.query(Test).filter(Test.lesson_id == lesson.id).all()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if message.from_user.id in authenticated_users:
            # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
            if not tests:
                markup.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç"))
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"–í —É—Ä–æ–∫–µ '{lesson.title}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.", reply_markup=markup)
            else:
                for test in tests:
                    markup.add(types.KeyboardButton(f"üìã {test.title}"))
                markup.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç"))
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"üìã –¢–µ—Å—Ç—ã —É—Ä–æ–∫–∞ '{lesson.title}':", reply_markup=markup)
        else:
            # –£—á–µ–Ω–∏–∫
            if not tests:
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"–í —É—Ä–æ–∫–µ '{lesson.title}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.", reply_markup=markup)
            else:
                for test in tests:
                    markup.add(types.KeyboardButton(f"üìã {test.title}"))
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"üìã –¢–µ—Å—Ç—ã —É—Ä–æ–∫–∞ '{lesson.title}':", reply_markup=markup)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text.startswith("üìã") and message.text != "üìã –¢–µ—Å—Ç—ã" and message.text != "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
def handle_test_selection(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    if message.from_user.id not in user_states:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    test_title = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    
    session = get_session()
    try:
        test = session.query(Test).filter(Test.title == test_title).first()
        if not test:
            bot.send_message(message.chat.id, "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        questions = session.query(TestQuestion).filter(TestQuestion.test_id == test.id).all()
        if not questions:
            bot.send_message(message.chat.id, "–í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.from_user.id] = {
            "current_test": test.id,
            "current_question": 0,
            "questions": [(q.id, q.question, q.correct_answer) for q in questions],
            "score": 0
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        show_test_question(message)
    finally:
        session.close()

def show_test_question(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    user_id = message.from_user.id
    data = user_data[user_id]
    
    if data["current_question"] >= len(data["questions"]):
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        total_questions = len(data["questions"])
        score = data["score"]
        percentage = (score / total_questions) * 100
        
        result_text = f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        result_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {total_questions}\n"
        result_text += f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage:.1f}%\n\n"
        
        if percentage >= 80:
            result_text += "–û—Ç–ª–∏—á–Ω–æ! üèÜ"
        elif percentage >= 60:
            result_text += "–•–æ—Ä–æ—à–æ! üëç"
        else:
            result_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üìö"
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
        bot.send_message(message.chat.id, result_text, reply_markup=markup)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        if user_id in user_data:
            del user_data[user_id]
        return
    
    question_id, question_text, correct_answer = data["questions"][data["current_question"]]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"))
    markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
    
    bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å {data['current_question'] + 1}:\n\n{question_text}", reply_markup=markup)
    user_states[user_id] = "answering_test"

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "answering_test")
def handle_test_answer(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    user_id = message.from_user.id
    
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        user_data[user_id]["current_question"] += 1
        show_test_question(message)
        return
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º":
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç
        if user_id in user_data:
            del user_data[user_id]
        user_states[user_id] = "student"
        show_subjects(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    data = user_data[user_id]
    question_id, question_text, correct_answer = data["questions"][data["current_question"]]
    
    if message.text.lower().strip() == correct_answer.lower().strip():
        data["score"] += 1
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data["current_question"] += 1
    show_test_question(message)

@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫")
def show_cards_list(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    teacher_id = authenticated_users[message.from_user.id]
    lessons = get_teacher_lessons(teacher_id)
    
    if not lessons:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
        return

    session = get_session()
    try:
        response = "üìù –í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n\n"
        for lesson in lessons:
            cards = session.query(Card).filter(Card.lesson_id == lesson.id).all()
            if cards:
                response += f"üìñ {lesson.title}:\n"
                for i, card in enumerate(cards, 1):
                    response += f"  {i}. {card.question}\n"
                response += "\n"
        
        if response == "üìù –í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n\n":
            response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫."
        
        bot.send_message(message.chat.id, response)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤")
def show_tests_list(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    teacher_id = authenticated_users[message.from_user.id]
    lessons = get_teacher_lessons(teacher_id)
    
    if not lessons:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
        return

    session = get_session()
    try:
        response = "üìã –í–∞—à–∏ —Ç–µ—Å—Ç—ã:\n\n"
        for lesson in lessons:
            tests = session.query(Test).filter(Test.lesson_id == lesson.id).all()
            if tests:
                response += f"üìñ {lesson.title}:\n"
                for test in tests:
                    questions_count = session.query(TestQuestion).filter(TestQuestion.test_id == test.id).count()
                    response += f"  üìã {test.title} ({questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
                response += "\n"
        
        if response == "üìã –í–∞—à–∏ —Ç–µ—Å—Ç—ã:\n\n":
            response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤."
        
        bot.send_message(message.chat.id, response)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text == "üë• –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
def admin_add_teacher(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_data –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}

    user_states[message.from_user.id] = WAITING_TEACHER_USERNAME
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_TEACHER_USERNAME and message.from_user.id == ADMIN_ID)
def admin_handle_teacher_username(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"""
    username = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_teacher = get_teacher_by_username(username)
    if existing_teacher:
        bot.send_message(message.chat.id, f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        user_states[message.from_user.id] = "admin"
        admin_panel(message)
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_data –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    
    user_data[message.from_user.id]["new_teacher_username"] = username
    user_states[message.from_user.id] = WAITING_TEACHER_PASSWORD
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_TEACHER_PASSWORD and message.from_user.id == ADMIN_ID)
def admin_handle_teacher_password(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"""
    password = message.text
    username = user_data[message.from_user.id]["new_teacher_username"]
    
    try:
        teacher = create_teacher(username=username, password=password)
        bot.send_message(message.chat.id, f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        user_states[message.from_user.id] = "admin"
        admin_panel(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {str(e)}")
        user_states[message.from_user.id] = "admin"
        admin_panel(message)

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
def admin_show_teachers(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    session = get_session()
    try:
        teachers = session.query(Teacher).all()
        
        if not teachers:
            bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
            return

        response = "üë• –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for i, teacher in enumerate(teachers, 1):
            lessons_count = len(get_teacher_lessons(teacher.id))
            response += f"{i}. {teacher.username} ({lessons_count} —É—Ä–æ–∫–æ–≤)\n"
        
        bot.send_message(message.chat.id, response)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def admin_statistics(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    session = get_session()
    try:
        teachers_count = session.query(Teacher).count()
        subjects_count = session.query(Subject).count()
        lessons_count = session.query(Lesson).count()
        cards_count = session.query(Card).count()
        tests_count = session.query(Test).count()
        questions_count = session.query(TestQuestion).count()
        
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        response += f"üë• –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {teachers_count}\n"
        response += f"üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}\n"
        response += f"üìñ –£—Ä–æ–∫–æ–≤: {lessons_count}\n"
        response += f"üìù –ö–∞—Ä—Ç–æ—á–µ–∫: {cards_count}\n"
        response += f"üìã –¢–µ—Å—Ç–æ–≤: {tests_count}\n"
        response += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö: {questions_count}\n"
        
        bot.send_message(message.chat.id, response)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" and message.from_user.id != ADMIN_ID)
def return_to_main_menu(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if message.from_user.id in authenticated_users:
        del authenticated_users[message.from_user.id]
    if message.from_user.id in user_states:
        del user_states[message.from_user.id]
    if message.from_user.id in user_data:
        del user_data[message.from_user.id]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üë®‚Äçüè´ –í–æ–π—Ç–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"), types.KeyboardButton("üë®‚Äçüéì –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫"))
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
def show_subjects_list(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    subjects = get_all_subjects()
    
    if not subjects:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return

    response = "üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n\n"
    for i, subject in enumerate(subjects, 1):
        lessons_count = len(get_subject_lessons(subject.id))
        response += f"{i}. {subject.name} ({lessons_count} —É—Ä–æ–∫–æ–≤)\n"
    
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫")
def edit_lesson_start(message):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    lesson_title = user_data[message.from_user.id]["selected_lesson"]
    user_data[message.from_user.id]["editing_lesson"] = lesson_title
    user_states[message.from_user.id] = WAITING_EDIT_LESSON_TITLE
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_title}':")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_EDIT_LESSON_TITLE)
def handle_edit_lesson_title(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    new_title = message.text
    lesson_title = user_data[message.from_user.id]["editing_lesson"]
    teacher_id = authenticated_users[message.from_user.id]
    
    # –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–∫
    session = get_session()
    try:
        lesson = session.query(Lesson).filter(Lesson.title == lesson_title, Lesson.teacher_id == teacher_id).first()
        if lesson:
            lesson.title = new_title
            session.commit()
            bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_title}'!")
            user_data[message.from_user.id]["selected_lesson"] = new_title
        else:
            bot.send_message(message.chat.id, "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        session.close()
    user_states[message.from_user.id] = "teacher"
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    user_id = message.from_user.id
    if user_id in user_data and "selected_subject" in user_data[user_id]:
        subject_name = user_data[user_id]["selected_subject"]
        session = get_session()
        try:
            subject = session.query(Subject).filter(Subject.name == subject_name).first()
            if subject:
                lessons = session.query(Lesson).filter(Lesson.subject_id == subject.id).all()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                if not lessons:
                    bot.send_message(message.chat.id, f"–í –ø—Ä–µ–¥–º–µ—Ç–µ '{subject.name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
                    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
                    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
                else:
                    buttons = []
                    for lesson in lessons:
                        buttons.append(types.KeyboardButton(f"üìñ {lesson.title}"))
                    for i in range(0, len(buttons), 2):
                        if i + 1 < len(buttons):
                            markup.add(buttons[i], buttons[i + 1])
                        else:
                            markup.add(buttons[i])
                    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
                    bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
            else:
                show_subjects(message)
        finally:
            session.close()
    else:
        show_subjects(message)

@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫")
def delete_lesson_confirm(message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    lesson_title = user_data[message.from_user.id]["selected_lesson"]
    teacher_id = authenticated_users[message.from_user.id]
    
    # –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–∫
    session = get_session()
    try:
        lesson = session.query(Lesson).filter(Lesson.title == lesson_title, Lesson.teacher_id == teacher_id).first()
        if lesson:
            # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ—Å—Ç—ã
            cards = session.query(Card).filter(Card.lesson_id == lesson.id).all()
            for card in cards:
                session.delete(card)
            
            tests = session.query(Test).filter(Test.lesson_id == lesson.id).all()
            for test in tests:
                questions = session.query(TestQuestion).filter(TestQuestion.test_id == test.id).all()
                for question in questions:
                    session.delete(question)
                session.delete(test)
            
            session.delete(lesson)
            session.commit()
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫ '{lesson_title}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã!")
        else:
            bot.send_message(message.chat.id, "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        session.close()
    user_states[message.from_user.id] = "teacher"
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    user_id = message.from_user.id
    if user_id in user_data and "selected_subject" in user_data[user_id]:
        subject_name = user_data[user_id]["selected_subject"]
        session = get_session()
        try:
            subject = session.query(Subject).filter(Subject.name == subject_name).first()
            if subject:
                lessons = session.query(Lesson).filter(Lesson.subject_id == subject.id).all()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                if not lessons:
                    bot.send_message(message.chat.id, f"–í –ø—Ä–µ–¥–º–µ—Ç–µ '{subject.name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
                    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
                    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
                else:
                    buttons = []
                    for lesson in lessons:
                        buttons.append(types.KeyboardButton(f"üìñ {lesson.title}"))
                    for i in range(0, len(buttons), 2):
                        if i + 1 < len(buttons):
                            markup.add(buttons[i], buttons[i + 1])
                        else:
                            markup.add(buttons[i])
                    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
                    bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
            else:
                show_subjects(message)
        finally:
            session.close()
    else:
        show_subjects(message)

@bot.message_handler(func=lambda message: message.text == "üìö –ü—Ä–µ–¥–º–µ—Ç—ã")
def handle_teacher_subjects(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìö –ü—Ä–µ–¥–º–µ—Ç—ã" –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    show_subjects(message)

@bot.message_handler(func=lambda message: message.text == "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
def access_management(message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("‚ûï –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø"), types.KeyboardButton("‚ûñ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø"))
    markup.add(types.KeyboardButton("üë• –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"), types.KeyboardButton("üìö –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤"))
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    bot.send_message(message.chat.id, "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûï –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø")
def grant_access_start(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = get_all_teachers()
    if not teachers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = []
    for teacher in teachers:
        buttons.append(types.KeyboardButton(f"üë§ {teacher.username}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])
    
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    
    user_states[message.from_user.id] = WAITING_ACCESS_TEACHER
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_ACCESS_TEACHER)
def handle_grant_access_teacher(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"""
    if message.from_user.id != ADMIN_ID:
        return
    
    if not message.text.startswith("üë§"):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    teacher_username = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    teacher = get_teacher_by_username(teacher_username)
    
    if not teacher:
        bot.send_message(message.chat.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["selected_teacher_id"] = teacher.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    subjects = get_all_subjects()
    if not subjects:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
    teacher_subjects = get_teacher_subjects(teacher.id)
    teacher_subject_ids = [s.id for s in teacher_subjects]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = []
    for subject in subjects:
        if subject.id not in teacher_subject_ids:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
            buttons.append(types.KeyboardButton(f"üìö {subject.name}"))
    
    if not buttons:
        bot.send_message(message.chat.id, f"–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_username} —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.")
        user_states[message.from_user.id] = "admin"
        access_management(message)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])
    
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    
    user_states[message.from_user.id] = WAITING_ACCESS_SUBJECT
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {teacher_username}:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚ûñ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø")
def revoke_access_start(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = get_all_teachers()
    if not teachers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = []
    for teacher in teachers:
        buttons.append(types.KeyboardButton(f"üë§ {teacher.username}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])
    
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    
    user_states[message.from_user.id] = WAITING_REVOKE_TEACHER
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_REVOKE_TEACHER)
def handle_revoke_access_teacher(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    if message.from_user.id != ADMIN_ID:
        return
    
    if not message.text.startswith("üë§"):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    teacher_username = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    teacher = get_teacher_by_username(teacher_username)
    
    if not teacher:
        bot.send_message(message.chat.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
    teacher_subjects = get_teacher_subjects(teacher.id)
    
    if not teacher_subjects:
        bot.send_message(message.chat.id, f"–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.")
        user_states[message.from_user.id] = "admin"
        access_management(message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["selected_teacher_id"] = teacher.id
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = []
    for subject in teacher_subjects:
        buttons.append(types.KeyboardButton(f"üìö {subject.name}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])
    
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    
    user_states[message.from_user.id] = WAITING_REVOKE_SUBJECT
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_username}:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üë• –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
def show_teacher_accesses(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    teachers = get_all_teachers()
    if not teachers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    response = "üë• –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n"
    
    for teacher in teachers:
        teacher_subjects = get_teacher_subjects(teacher.id)
        response += f"üë§ {teacher.username}:\n"
        
        if teacher_subjects:
            for subject in teacher_subjects:
                response += f"  ‚úÖ {subject.name}\n"
        else:
            response += f"  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n"
        
        response += "\n"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìö –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
def show_subject_accesses(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    subjects = get_all_subjects()
    if not subjects:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    
    response = "üìö –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n\n"
    
    for subject in subjects:
        subject_teachers = get_subject_teachers(subject.id)
        response += f"üìö {subject.name}:\n"
        
        if subject_teachers:
            for teacher in subject_teachers:
                response += f"  üë§ {teacher.username}\n"
        else:
            response += f"  ‚ùå –ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º\n"
        
        response += "\n"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def return_to_admin_panel(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    user_states[message.from_user.id] = "admin"
    admin_panel(message)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            import time
            time.sleep(5)
            continue 