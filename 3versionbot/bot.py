import telebot
from telebot import types
import math
from database import Teacher, Subject, Lesson, Card, get_session
import os
from dotenv import load_dotenv
from sqlalchemy import func
from db_utils import (
    create_teacher,
    get_teacher_by_username,
    add_subject,
    get_all_subjects,
    get_subject_by_name,
    add_lesson,
    get_teacher_lessons,
    get_subject_lessons,
    edit_lesson,
    delete_lesson,
    add_card,
    get_lesson_cards,
    edit_card,
    delete_card,
    grant_subject_access,
    revoke_subject_access,
    get_teacher_subjects,
    get_subject_teachers,
    has_subject_access,
    get_all_teachers,
    get_teacher_by_id
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('tg.env')
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authenticated_users = {}  # {user_id: teacher_id}
user_states = {}  # {user_id: state}
user_data = {}  # {user_id: {key: value}}
# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ teacher_id -> user_id (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
teacher_last_chat = {}  # {teacher_id: user_id}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_USERNAME = "waiting_username"
WAITING_PASSWORD = "waiting_password"
WAITING_LESSON_TITLE = "waiting_lesson_title"
WAITING_LESSON_CONTENT = "waiting_lesson_content"
WAITING_CARD_QUESTION = "waiting_card_question"
WAITING_CARD_ANSWER = "waiting_card_answer"
WAITING_CARD_LESSON = "waiting_card_lesson"
WAITING_LESSON_SUBJECT = "waiting_lesson_subject"
WAITING_SUBJECT_NAME = "waiting_subject_name"
WAITING_TEACHER_USERNAME = "waiting_teacher_username"
WAITING_TEACHER_PASSWORD = "waiting_teacher_password"
WAITING_ADMIN_USERNAME = "waiting_admin_username"
WAITING_ADMIN_PASSWORD = "waiting_admin_password"
WAITING_EDIT_LESSON_TITLE = "waiting_edit_lesson_title"
WAITING_EDIT_LESSON_CONTENT = "waiting_edit_lesson_content"
WAITING_ACCESS_TEACHER = "waiting_access_teacher"
WAITING_ACCESS_SUBJECT = "waiting_access_subject"
WAITING_REVOKE_TEACHER = "waiting_revoke_teacher"
WAITING_REVOKE_SUBJECT = "waiting_revoke_subject"
WAITING_SUGGEST_TERM = "waiting_suggest_term"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_SETTINGS = {
    'total_subjects': 30,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    'subjects_per_page': 4,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    'lessons_per_page': 4,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    'total_lessons': 10  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
# buttons: —Å–ø–∏—Å–æ–∫ telebot.types.KeyboardButton
# page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å 0)
# per_page: —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6)
# extra_buttons: —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–∞–∑–∞–¥")
def create_paginated_keyboard(buttons, page=0, per_page=6, extra_buttons=None):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 6)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    total = len(buttons)
    start = page * per_page
    end = start + per_page
    page_buttons = buttons[start:end]
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (2 —Ä—è–¥–∞ –ø–æ 3)
    for i in range(0, len(page_buttons), 3):
        row = page_buttons[i:i+3]
        markup.add(*row)
    # –°–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è) ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –Ω–∏–∂–Ω–∏–π —Ä—è–¥
    service_buttons = []
    if end < total:
        service_buttons.append(types.KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"))
    if page > 0:
        service_buttons.append(types.KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"))
    if extra_buttons:
        service_buttons.extend(extra_buttons)
    if service_buttons:
        markup.add(*service_buttons)
    return markup

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_ACCESS_SUBJECT)
def handle_grant_access_subject(message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        if not message.text.startswith("üìö"):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        subject_name = message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        subject = get_subject_by_name(subject_name)
        if not subject:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        teacher_id = user_data.get(message.from_user.id, {}).get("selected_teacher_id")
        if not teacher_id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.")
            user_states[message.from_user.id] = "admin"
            access_management(message)
            return
        teacher = get_teacher_by_id(teacher_id)
        if not teacher:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[message.from_user.id] = "admin"
            access_management(message)
            return
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
        success = grant_subject_access(teacher_id, subject.id)
        if success:
            bot.send_message(message.chat.id, f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {teacher.username}!")
            # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é ---
            notified = False
            for user_id, auth_teacher_id in authenticated_users.items():
                if auth_teacher_id == teacher_id:
                    bot.send_message(user_id, f"üéâ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
                    notified = True
                    break
            if not notified:
                chat_id = teacher_last_chat.get(teacher_id)
                if chat_id:
                    bot.send_message(chat_id, f"üéâ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher.username} —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if message.from_user.id in user_data:
            del user_data[message.from_user.id]
        user_states[message.from_user.id] = "admin"
        access_management(message)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_REVOKE_SUBJECT)
def handle_revoke_access_subject(message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        if not message.text.startswith("üìö"):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        subject_name = message.text[2:].strip()
        subject = get_subject_by_name(subject_name)
        if not subject:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        teacher_id = user_data.get(message.from_user.id, {}).get("selected_teacher_id")
        if not teacher_id:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.")
            user_states[message.from_user.id] = "admin"
            access_management(message)
            return
        teacher = get_teacher_by_id(teacher_id)
        if not teacher:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[message.from_user.id] = "admin"
            access_management(message)
            return
        # –û—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        success = revoke_subject_access(teacher_id, subject.id)
        if success:
            bot.send_message(message.chat.id, f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}' –æ—Ç–æ–∑–≤–∞–Ω —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher.username}!")
            # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é ---
            notified = False
            for user_id, auth_teacher_id in authenticated_users.items():
                if auth_teacher_id == teacher_id:
                    bot.send_message(user_id, f"‚ö†Ô∏è –£ –≤–∞—Å –æ—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'.")
                    notified = True
                    break
            if not notified:
                chat_id = teacher_last_chat.get(teacher_id)
                if chat_id:
                    bot.send_message(chat_id, f"‚ö†Ô∏è –£ –≤–∞—Å –æ—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher.username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if message.from_user.id in user_data:
            del user_data[message.from_user.id]
        user_states[message.from_user.id] = "admin"
        access_management(message)

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üë®‚Äçüè´ –í–æ–π—Ç–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"), types.KeyboardButton("üë®‚Äçüéì –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏:", reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_states[message.from_user.id] = "admin"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"), types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"))
    markup.add(types.KeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"), types.KeyboardButton("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"))
    markup.add(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüè´ –í–æ–π—Ç–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
def teacher_login(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    user_states[message.from_user.id] = WAITING_USERNAME
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_USERNAME)
def handle_username(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data[message.from_user.id] = {"username": message.text}
    user_states[message.from_user.id] = WAITING_PASSWORD
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_PASSWORD)
def handle_password(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    username = user_data[message.from_user.id]["username"]
    password = message.text
    # –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    teacher = get_teacher_by_username(username)
    if teacher and teacher.check_password(password):
        authenticated_users[message.from_user.id] = teacher.id  # ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        teacher_last_chat[teacher.id] = message.from_user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π chat_id –¥–ª—è teacher_id
        user_states[message.from_user.id] = "teacher"
        show_subjects(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        user_states[message.from_user.id] = WAITING_USERNAME
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüéì –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫")
def student_login(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
    if message.from_user.id in authenticated_users:
        del authenticated_users[message.from_user.id]
    if message.from_user.id in user_states:
        del user_states[message.from_user.id]
    if message.from_user.id in user_data:
        del user_data[message.from_user.id]
    user_states[message.from_user.id] = "student"
    show_subjects(message)

def show_teacher_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã"))
    markup.add(types.KeyboardButton("–í—ã–π—Ç–∏"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def show_subjects(message, page=0):
    session = get_session()
    try:
        if message.from_user.id in authenticated_users:
            teacher_id = authenticated_users[message.from_user.id]
            subjects = get_teacher_subjects(teacher_id)
        else:
            subjects = session.query(Subject).all()
        if not subjects:
            if message.from_user.id in authenticated_users:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            else:
                bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        user_data.setdefault(message.from_user.id, {})["subjects_list"] = [s.name for s in subjects]
        user_data[message.from_user.id]["subjects_page"] = page
        buttons = [types.KeyboardButton(f"üìö {subject.name}") for subject in subjects]
        markup = create_paginated_keyboard(buttons, page=page)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text.startswith("üìö") and message.text != "üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
def handle_subject(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    subjects_list = user_data.get(message.from_user.id, {}).get("subjects_list")
    if subjects_list:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        subject_name = message.text[2:].strip()
        if subject_name not in subjects_list:
            bot.send_message(message.chat.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–Ω–æ–≤–æ.")
            show_subjects(message, page=user_data.get(message.from_user.id, {}).get("subjects_page", 0))
            return
    handle_subject_core(message, page=0)

def handle_subject_core(message, page=0):
    if (user_states.get(message.from_user.id) == "admin" or 
        user_states.get(message.from_user.id) == WAITING_ACCESS_SUBJECT or
        user_states.get(message.from_user.id) == WAITING_REVOKE_SUBJECT):
        return
    if message.from_user.id not in user_states:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return
    subject_name = message.text[2:]
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["selected_subject"] = subject_name
    session = get_session()
    try:
        subject = get_subject_by_name(subject_name)
        if not subject:
            bot.send_message(message.chat.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        lessons = session.query(Lesson).filter(Lesson.subject_id == subject.id).all()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        user_data[message.from_user.id]["lessons_list"] = [l.title for l in lessons]
        user_data[message.from_user.id]["lessons_page"] = page
        buttons = [types.KeyboardButton(f"üìñ {lesson.title}") for lesson in lessons]
        markup = create_paginated_keyboard(buttons, page=page)
        if not lessons:
            bot.send_message(message.chat.id, f"–í –ø—Ä–µ–¥–º–µ—Ç–µ '{subject.name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
            if message.from_user.id in authenticated_users:
                markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
                bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
            else:
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
                bot.send_message(message.chat.id, f"", reply_markup=markup)
            return
        else:
            if message.from_user.id in authenticated_users:
                markup = create_paginated_keyboard(buttons, page=page, extra_buttons=[types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º")])
            else:
                markup = create_paginated_keyboard(buttons, page=page, extra_buttons=[types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º")])
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text.startswith("üìñ"))
def handle_lesson(message):
    handle_lesson_core(message, page=0)

def handle_lesson_core(message, page=0):
    if message.from_user.id not in user_states:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return
    lesson_title = message.text[2:]
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["selected_lesson"] = lesson_title
    if message.from_user.id in authenticated_users:
        teacher_id = authenticated_users[message.from_user.id]
        session = get_session()
        try:
            selected_subject = user_data[message.from_user.id].get("selected_subject")
            if not selected_subject:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                return
            subject = get_subject_by_name(selected_subject)
            if not subject:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            lesson = session.query(Lesson).filter(
                Lesson.title == lesson_title, 
                Lesson.subject_id == subject.id,
                Lesson.teacher_id == teacher_id
            ).first()
            if lesson:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                markup.add(types.KeyboardButton("üìù –ö–∞—Ä—Ç–æ—á–∫–∏"))
                markup.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫"))
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–∫: {lesson_title}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                markup.add(types.KeyboardButton("üìù –ö–∞—Ä—Ç–æ—á–∫–∏"))
                markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
                bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–∫: {lesson_title}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        finally:
            session.close()
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton("üìù –ö–∞—Ä—Ç–æ—á–∫–∏"))
        markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–∫: {lesson_title}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
def add_subject_start(message):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –í–ê–ñ–ù–û: –ü–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è! –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è.
    """
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.")
        return
    # –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    user_states[message.from_user.id] = WAITING_SUBJECT_NAME
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_SUBJECT_NAME)
def handle_subject_name(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª —Å–ª—É–∂–µ–±–Ω—É—é –∫–Ω–æ–ø–∫—É ‚Äî –æ—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    """
    if message.from_user.id != ADMIN_ID:
        return
    service_buttons = [
        "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π",
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "üìö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º",
        "üë• –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
    ]
    if message.text in service_buttons:
        user_states[message.from_user.id] = "admin"
        admin_panel(message)
        return
    subject_name = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
    existing_subject = get_subject_by_name(subject_name)
    if existing_subject:
        bot.send_message(message.chat.id, f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        user_states[message.from_user.id] = "admin"
        admin_panel(message)
        return
    subject = add_subject(name=subject_name)
    bot.send_message(message.chat.id, f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    user_states[message.from_user.id] = "admin"
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫")
def add_lesson_start(message):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞.
    –í–ê–ñ–ù–û: –ü–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è! –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è.
    """
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return
    # –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
    user_id = message.from_user.id
    if user_id in user_data and "selected_subject" in user_data[user_id]:
        subject_name = user_data[user_id]["selected_subject"]
        user_data[user_id]["subject_name"] = subject_name
        user_states[user_id] = WAITING_LESSON_TITLE
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}':")
    else:
        teacher_id = authenticated_users[user_id]
        subjects = get_teacher_subjects(teacher_id)
        if not subjects:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        markup = create_paginated_keyboard(buttons=[types.KeyboardButton(f"üìö {subject.name}") for subject in subjects])
        user_states[message.from_user.id] = WAITING_LESSON_SUBJECT
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É—Ä–æ–∫–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_LESSON_SUBJECT)
def handle_lesson_subject(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É—Ä–æ–∫–∞"""
    if not message.text.startswith("üìö"):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    subject_name = message.text[2:]
    user_data[message.from_user.id]["subject_name"] = subject_name
    user_states[message.from_user.id] = WAITING_LESSON_TITLE
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_LESSON_TITLE)
def handle_lesson_title(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª —Å–ª—É–∂–µ–±–Ω—É—é –∫–Ω–æ–ø–∫—É ‚Äî –æ—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤/–ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    """
    service_buttons = [
        "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º",
        "–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫",
        "‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    if message.text in service_buttons:
        user_states[message.from_user.id] = "teacher"
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        user_id = message.from_user.id
        if user_id in user_data and "selected_subject" in user_data[user_id]:
            subject_name = user_data[user_id]["selected_subject"]
            session = get_session()
            try:
                subject = session.query(Subject).filter(Subject.name == subject_name).first()
                if subject:
                    lessons = session.query(Lesson).filter(Lesson.subject_id == subject.id).all()
                    markup = create_paginated_keyboard(buttons=[types.KeyboardButton(f"üìñ {lesson.title}") for lesson in lessons])
                    if not lessons:
                        bot.send_message(message.chat.id, f"–í –ø—Ä–µ–¥–º–µ—Ç–µ '{subject.name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
                        if message.from_user.id in authenticated_users:
                            markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
                            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
                        else:
                            markup.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
                            bot.send_message(message.chat.id, f"", reply_markup=markup)
                        return
                    else:
                        markup = create_paginated_keyboard(buttons=markup.keyboard[0], extra_buttons=[types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º")])
                        bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
                else:
                    show_subjects(message)
            finally:
                session.close()
        else:
            show_subjects(message)
        return
    teacher_id = authenticated_users[message.from_user.id]
    title = message.text
    subject_name = user_data[message.from_user.id]["subject_name"]
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    subject = get_subject_by_name(subject_name)
    if not subject:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_states[message.from_user.id] = "teacher"
        show_teacher_menu(message)
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
    if not has_subject_access(teacher_id, subject.id):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.")
        user_states[message.from_user.id] = "teacher"
        show_teacher_menu(message)
        return
    lesson = add_lesson(title=title, content="", teacher_id=teacher_id, subject_id=subject.id)
    bot.send_message(message.chat.id, f"–£—Ä–æ–∫ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'!")
    user_states[message.from_user.id] = "teacher"
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if "subject_name" in user_data[message.from_user.id]:
        user_data[message.from_user.id]["selected_subject"] = user_data[message.from_user.id]["subject_name"]
        del user_data[message.from_user.id]["subject_name"]
    if "selected_lesson" in user_data[message.from_user.id]:
        del user_data[message.from_user.id]["selected_lesson"]
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    from types import SimpleNamespace
    fake_message = SimpleNamespace()
    fake_message.chat = message.chat
    fake_message.from_user = message.from_user
    fake_message.text = f"üìö {subject.name}"
    handle_subject(fake_message)

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
def add_card_start(message):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.
    –í–ê–ñ–ù–û: –ü–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è! –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞.
    """
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return
    user_id = message.from_user.id
    if user_id in user_data and "selected_lesson" in user_data[user_id]:
        lesson_title = user_data[user_id]["selected_lesson"]
        user_data[user_id]["lesson_title"] = lesson_title
        user_states[user_id] = WAITING_CARD_QUESTION
        bot.send_message(
            message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É—Ä–æ–∫—É '{lesson_title}':\n\n"
            "- –î–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: –í–æ–ø—Ä–æ—Å%–û—Ç–≤–µ—Ç\n"
            "- –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö: –í–æ–ø—Ä–æ—Å1%–û—Ç–≤–µ—Ç1;–í–æ–ø—Ä–æ—Å2%–û—Ç–≤–µ—Ç2\n"
            "(–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è %, –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî ;)")
        return
    teacher_id = authenticated_users[user_id]
    lessons = get_teacher_lessons(teacher_id)
    if not lessons:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —É—Ä–æ–∫.")
        return
    markup = create_paginated_keyboard(buttons=[types.KeyboardButton(f"üìñ {lesson.title}") for lesson in lessons])
    user_states[user_id] = WAITING_CARD_LESSON
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_CARD_LESSON)
def handle_card_lesson(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    if not message.text.startswith("üìñ"):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    lesson_title = message.text[2:]
    user_data[message.from_user.id]["lesson_title"] = lesson_title
    user_states[message.from_user.id] = WAITING_CARD_QUESTION
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_CARD_QUESTION)
def handle_card_question(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
    user_id = message.from_user.id
    teacher_id = authenticated_users[user_id]
    lesson_title = user_data[user_id]["lesson_title"]

    text = message.text.strip()
    if ";" in text or "%" in text:
        # –§–æ—Ä–º–∞—Ç: –í–æ–ø—Ä–æ—Å%–û—Ç–≤–µ—Ç;–í–æ–ø—Ä–æ—Å2%–û—Ç–≤–µ—Ç2
        pairs = [p.strip() for p in text.split(";") if p.strip()]
        added = 0
        lessons = get_teacher_lessons(teacher_id)
        lesson = next((l for l in lessons if l.title == lesson_title), None)
        if lesson:
            for pair in pairs:
                if "%" in pair:
                    q, a = pair.split("%", 1)
                    q, a = q.strip(), a.strip()
                    if q:
                        add_card(question=q, answer=a, lesson_id=lesson.id)
                        added += 1
                else:
                    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å, –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
                    q = pair.strip()
                    if q:
                        add_card(question=q, answer="", lesson_id=lesson.id)
                        added += 1
            if added:
                bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {added} –∫ —É—Ä–æ–∫—É '{lesson.title}'!")
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            from types import SimpleNamespace
            fake_message = SimpleNamespace()
            fake_message.chat = message.chat
            fake_message.from_user = message.from_user
            fake_message.text = f"üìñ {lesson.title}"
            show_lesson_cards(fake_message)
            return
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[user_id] = "teacher"
            show_teacher_menu(message)
            return
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞, –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç–∞
        user_data[user_id]["question"] = text
        user_states[user_id] = WAITING_CARD_ANSWER
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_CARD_ANSWER)
def handle_card_answer(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    user_id = message.from_user.id
    teacher_id = authenticated_users[user_id]
    lesson_title = user_data[user_id]["lesson_title"]
    question = user_data[user_id]["question"]
    answer = message.text.strip()

    lessons = get_teacher_lessons(teacher_id)
    lesson = next((l for l in lessons if l.title == lesson_title), None)
    if lesson:
        add_card(question=question, answer=answer, lesson_id=lesson.id)
        bot.send_message(message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —É—Ä–æ–∫—É '{lesson.title}'!")
        from types import SimpleNamespace
        fake_message = SimpleNamespace()
        fake_message.chat = message.chat
        fake_message.from_user = message.from_user
        fake_message.text = f"üìñ {lesson.title}"
        show_lesson_cards(fake_message)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_states[user_id] = "teacher"
        show_teacher_menu(message)

@bot.message_handler(commands=['logout'])
def logout(message):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if message.from_user.id in authenticated_users:
        del authenticated_users[message.from_user.id]
    if message.from_user.id in user_states:
        del user_states[message.from_user.id]
    if message.from_user.id in user_data:
        del user_data[message.from_user.id]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üë®‚Äçüè´ –í–æ–π—Ç–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"), types.KeyboardButton("üë®‚Äçüéì –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫"))
    bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º")
def return_to_subjects(message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    if user_id in user_data and "selected_subject" in user_data[user_id]:
        del user_data[user_id]["selected_subject"]
    
    show_subjects(message)

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º")
def return_to_lessons(message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
    if user_id in user_data and "selected_lesson" in user_data[user_id]:
        del user_data[user_id]["selected_lesson"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    if user_id in user_data and "selected_subject" in user_data[user_id]:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Ä–æ–∫–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_name = user_data[user_id]["selected_subject"]
        session = get_session()
        try:
            subject = session.query(Subject).filter(Subject.name == subject_name).first()
            if not subject:
                bot.send_message(message.chat.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            lessons = session.query(Lesson).filter(Lesson.subject_id == subject.id).all()
            
            if not lessons:
                bot.send_message(message.chat.id, f"–í –ø—Ä–µ–¥–º–µ—Ç–µ '{subject.name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
                return

            markup = create_paginated_keyboard(buttons=[types.KeyboardButton(f"üìñ {lesson.title}") for lesson in lessons])
            markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"), types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"))
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':", reply_markup=markup)
        finally:
            session.close()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        show_subjects(message)

@bot.message_handler(func=lambda message: message.text == "üìù –ö–∞—Ä—Ç–æ—á–∫–∏")
def show_lesson_cards(message, page=0):
    user_id = message.from_user.id
    if user_id not in user_data or "selected_lesson" not in user_data[user_id]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.")
        return
    lesson_title = user_data[user_id]["selected_lesson"]
    session = get_session()
    try:
        lesson = session.query(Lesson).filter(Lesson.title == lesson_title).first()
        if not lesson:
            bot.send_message(message.chat.id, "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        cards = session.query(Card).filter(Card.lesson_id == lesson.id).all()
        if not cards:
            text = f"–í —É—Ä–æ–∫–µ '{lesson.title}' –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫."
        else:
            text = f"–í–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞:\n"
            for i, card in enumerate(cards, 1):
                answer = card.answer if card.answer else "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)"
                text += f"{i}. {card.question} - {answer}\n"
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –º–∞–∫—Å–∏–º—É–º 7 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≤–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ
        # 1 ‚Äî "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", 1 ‚Äî "–ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º", 1 ‚Äî "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –ø–∞—Ä—ã "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å"
        max_buttons = 7
        service_buttons = 2 # "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É" –∏ "–ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"
        per_page = (max_buttons - service_buttons) // 2 # –ø–æ 2 –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
        total_pairs = (len(cards) + per_page - 1) // per_page
        page = int(page) if isinstance(page, int) or (isinstance(page, str) and page.isdigit()) else 0
        page = max(0, page)
        user_data[user_id]["cards_page"] = page
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"))
        if cards:
            start = page * per_page
            end = start + per_page
            for i, card in enumerate(cards[start:end], start + 1):
                markup.add(
                    types.KeyboardButton(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {i}"),
                    types.KeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i}")
                )
        nav_buttons = []
        if (end < len(cards)):
            nav_buttons.append(types.KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"))
        nav_buttons.append(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º"))
        markup.add(*nav_buttons)
        bot.send_message(message.chat.id, text, reply_markup=markup)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text in ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"])
def handle_cards_pagination(message):
    user_id = message.from_user.id
    # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if user_id not in user_data:
        user_data[user_id] = {}
    if "selected_lesson" not in user_data[user_id]:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–∞—ë–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å)
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.")
        return
    page = user_data[user_id].get("cards_page", 0)
    if message.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        page += 1
    elif message.text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        page = max(0, page - 1)
    # selected_lesson –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
    show_lesson_cards(message, page=page)

@bot.message_handler(func=lambda message: message.text.startswith("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å "))
def handle_delete_card(message):
    user_id = message.from_user.id
    if user_id not in user_data or "selected_lesson" not in user_data[user_id]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.")
        return
    lesson_title = user_data[user_id]["selected_lesson"]
    page = user_data[user_id].get("cards_page", 0)
    try:
        idx = int(message.text.replace("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ", "").strip()) - 1
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏.")
        return
    session = get_session()
    try:
        lesson = session.query(Lesson).filter(Lesson.title == lesson_title).first()
        cards = session.query(Card).filter(Card.lesson_id == lesson.id).all()
        if idx < 0 or idx >= len(cards):
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏.")
            return
        card = cards[idx]
        session.delete(card)
        session.commit()
        bot.send_message(message.chat.id, "–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    finally:
        session.close()
    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    total_pages = (len(cards) - 1 + 7 - 1) // 7
    if page >= total_pages:
        page = max(0, total_pages - 1)
    show_lesson_cards(message, page=page)

@bot.message_handler(func=lambda message: message.text.startswith("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "))
def handle_edit_card_start(message):
    user_id = message.from_user.id
    if user_id not in user_data or "selected_lesson" not in user_data[user_id]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫.")
        return
    lesson_title = user_data[user_id]["selected_lesson"]
    page = user_data[user_id].get("cards_page", 0)
    try:
        idx = int(message.text.replace("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ", "").strip()) - 1
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏.")
        return
    session = get_session()
    try:
        lesson = session.query(Lesson).filter(Lesson.title == lesson_title).first()
        cards = session.query(Card).filter(Card.lesson_id == lesson.id).all()
        if idx < 0 or idx >= len(cards):
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏.")
            return
        card = cards[idx]
        user_data[user_id]["edit_card_id"] = card.id
        user_states[user_id] = "waiting_edit_card"
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: –í–æ–ø—Ä–æ—Å%–û—Ç–≤–µ—Ç):\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n{card.question} - {card.answer}")
    finally:
        session.close()

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "waiting_edit_card")
def handle_edit_card(message):
    user_id = message.from_user.id
    card_id = user_data[user_id].get("edit_card_id")
    if not card_id:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        user_states[user_id] = "teacher"
        return
    if "%" not in message.text:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –í–æ–ø—Ä–æ—Å%–û—Ç–≤–µ—Ç")
        return
    q, a = message.text.split("%", 1)
    q, a = q.strip(), a.strip()
    session = get_session()
    try:
        card = session.query(Card).filter(Card.id == card_id).first()
        if not card:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            user_states[user_id] = "teacher"
            return
        card.question = q
        card.answer = a
        session.commit()
        bot.send_message(message.chat.id, "–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    finally:
        session.close()
    page = user_data[user_id].get("cards_page", 0)
    user_states[user_id] = "teacher"
    show_lesson_cards(message, page=page)

@bot.message_handler(func=lambda message: message.text == "üìö –ü—Ä–µ–¥–º–µ—Ç—ã")
def handle_teacher_subjects(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìö –ü—Ä–µ–¥–º–µ—Ç—ã" –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id not in authenticated_users:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    show_subjects(message)

@bot.message_handler(func=lambda message: message.text == "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
def access_management(message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("‚ûï –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø"), types.KeyboardButton("‚ûñ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø"))
    markup.add(types.KeyboardButton("üë• –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"))
    markup.add(types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    bot.send_message(message.chat.id, "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûï –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø")
def grant_access_start(message, page=0):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = get_all_teachers()
    if not teachers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    markup = create_paginated_keyboard(buttons=[types.KeyboardButton(f"üë§ {teacher.username}") for teacher in teachers])
    
    user_states[message.from_user.id] = WAITING_ACCESS_TEACHER
    user_data.setdefault(message.from_user.id, {})["teachers_page"] = page
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_ACCESS_TEACHER)
def handle_grant_access_teacher(message, page=0):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"""
    if message.from_user.id != ADMIN_ID:
        return
    
    if not message.text.startswith("üë§"):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    teacher_username = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    teacher = get_teacher_by_username(teacher_username)
    
    if not teacher:
        bot.send_message(message.chat.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["selected_teacher_id"] = teacher.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    subjects = get_all_subjects()
    if not subjects:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
    teacher_subjects = get_teacher_subjects(teacher.id)
    teacher_subject_ids = [s.id for s in teacher_subjects]
    
    markup = create_paginated_keyboard(buttons=[types.KeyboardButton(f"üìö {subject.name}") for subject in subjects if subject.id not in teacher_subject_ids])
    
    if not markup.keyboard[0]:
        bot.send_message(message.chat.id, f"–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_username} —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.")
        user_states[message.from_user.id] = "admin"
        access_management(message)
        return
    
    user_states[message.from_user.id] = WAITING_ACCESS_SUBJECT
    user_data.setdefault(message.from_user.id, {})["subjects_access_page"] = page
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {teacher_username}:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûñ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø")
def revoke_access_start(message, page=0):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = get_all_teachers()
    if not teachers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    markup = create_paginated_keyboard(buttons=[types.KeyboardButton(f"üë§ {teacher.username}") for teacher in teachers])
    
    user_states[message.from_user.id] = WAITING_REVOKE_TEACHER
    user_data.setdefault(message.from_user.id, {})["teachers_page"] = page
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_REVOKE_TEACHER)
def handle_revoke_access_teacher(message, page=0):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    if message.from_user.id != ADMIN_ID:
        return
    
    if not message.text.startswith("üë§"):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    teacher_username = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    teacher = get_teacher_by_username(teacher_username)
    
    if not teacher:
        bot.send_message(message.chat.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
    teacher_subjects = get_teacher_subjects(teacher.id)
    
    if not teacher_subjects:
        bot.send_message(message.chat.id, f"–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.")
        user_states[message.from_user.id] = "admin"
        access_management(message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["selected_teacher_id"] = teacher.id
    
    markup = create_paginated_keyboard(buttons=[types.KeyboardButton(f"üìö {subject.name}") for subject in teacher_subjects])
    
    user_states[message.from_user.id] = WAITING_REVOKE_SUBJECT
    user_data.setdefault(message.from_user.id, {})["subjects_access_page"] = page
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_username}:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üë• –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
def show_teacher_accesses(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    teachers = get_all_teachers()
    if not teachers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    response = "üë• –î–æ—Å—Ç—É–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n"
    
    for teacher in teachers:
        teacher_subjects = get_teacher_subjects(teacher.id)
        response += f"üë§ {teacher.username}:\n"
        
        if teacher_subjects:
            for subject in teacher_subjects:
                response += f"  ‚úÖ {subject.name}\n"
        else:
            response += f"  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n"
        
        response += "\n"
    
    markup = create_paginated_keyboard(buttons=[types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def return_to_admin_panel(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    user_states[message.from_user.id] = "admin"
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    session = get_session()
    try:
        teachers_count = session.query(Teacher).count()
        subjects_count = session.query(Subject).count()
        lessons_count = session.query(Lesson).count()
        cards_count = session.query(Card).count()
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë• –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {teachers_count}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}\n"
            f"üìñ –£—Ä–æ–∫–æ–≤: {lessons_count}\n"
            f"üìù –ö–∞—Ä—Ç–æ—á–µ–∫: {cards_count}"
        )
        markup = create_paginated_keyboard(buttons=[types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
        bot.send_message(message.chat.id, response, reply_markup=markup)
    finally:
        session.close()

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
def show_teachers_list(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    from db_utils import get_all_teachers
    teachers = get_all_teachers()
    if not teachers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return
    response = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for t in teachers:
        response += f"üë§ {t.username} (ID: {t.id})\n"
    markup = create_paginated_keyboard(buttons=[types.KeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üë• –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
def add_teacher_start(message):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    """
    if message.from_user.id != ADMIN_ID or user_states.get(message.from_user.id) != "admin":
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    user_states[message.from_user.id] = WAITING_TEACHER_USERNAME
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_TEACHER_USERNAME)
def handle_new_teacher_username(message):
    if message.from_user.id != ADMIN_ID:
        return
    username = message.text.strip()
    if not username:
        bot.send_message(message.chat.id, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return
    user_data[message.from_user.id] = {"new_teacher_username": username}
    user_states[message.from_user.id] = WAITING_TEACHER_PASSWORD
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {username}:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_TEACHER_PASSWORD)
def handle_new_teacher_password(message):
    if message.from_user.id != ADMIN_ID:
        return
    password = message.text.strip()
    username = user_data.get(message.from_user.id, {}).get("new_teacher_username")
    if not username:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        user_states[message.from_user.id] = "admin"
        admin_panel(message)
        return
    if not password:
        bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    from db_utils import get_teacher_by_username, create_teacher
    if get_teacher_by_username(username):
        bot.send_message(message.chat.id, f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        user_states[message.from_user.id] = "admin"
        admin_panel(message)
        return
    create_teacher(username, password)
    bot.send_message(message.chat.id, f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    user_states[message.from_user.id] = "admin"
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text in ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"])
def handle_pagination(message):
    user_id = message.from_user.id
    # --- –£—Ä–æ–∫–∏ ---
    if "selected_subject" in user_data.get(user_id, {}):
        page = user_data.get(user_id, {}).get("lessons_page", 0)
        if message.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
            page += 1
        else:
            page = max(0, page - 1)
        user_data.setdefault(user_id, {})["lessons_page"] = page
        subject_name = user_data[user_id]["selected_subject"]
        from types import SimpleNamespace
        fake_message = SimpleNamespace()
        fake_message.chat = message.chat
        fake_message.from_user = message.from_user
        fake_message.text = f"üìö {subject_name}"
        handle_subject_core(fake_message, page=page)
        return
    state = user_states.get(user_id)
    # --- –ü—Ä–µ–¥–º–µ—Ç—ã ---
    if state in ["teacher", "student"] or (state is None and user_id not in authenticated_users):
        page = user_data.get(user_id, {}).get("subjects_page", 0)
        if message.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
            page += 1
        else:
            page = max(0, page - 1)
        user_data.setdefault(user_id, {})["subjects_page"] = page
        show_subjects(message, page=page)
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ...

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            import time
            time.sleep(5)
            continue 